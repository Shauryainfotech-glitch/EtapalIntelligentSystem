import { useState, useRef } from "react";
import { useForm, useFieldArray } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { Separator } from "@/components/ui/separator";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import {
  Plus,
  Trash2,
  Copy,
  Eye,
  Settings,
  Layout,
  Database,
  Code,
  FileText,
  GripVertical,
  Edit,
  Save,
} from "lucide-react";

// Form schemas for template builder
const templateBuilderSchema = z.object({
  name: z.string().min(1, "‡§ü‡•á‡§Æ‡•ç‡§™‡•ç‡§≤‡•á‡§ü ‡§®‡§æ‡§Æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à / Template name is required"),
  nameMarathi: z.string().optional(),
  description: z.string().optional(),
  descriptionMarathi: z.string().optional(),
  category: z.string().min(1, "‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à / Category is required"),
  templateType: z.string().min(1, "‡§ü‡•á‡§Æ‡•ç‡§™‡•ç‡§≤‡•á‡§ü ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à / Template type is required"),
  subcategory: z.string().optional(),
  letterSubtype: z.string().optional(),
  departmentCode: z.string().optional(),
  isPublic: z.boolean().default(false),
  tags: z.array(z.string()).default([]),
  content: z.string().optional(),
  structure: z.object({
    header: z.object({
      enabled: z.boolean().default(true),
      content: z.string().default(""),
      height: z.string().default("auto"),
    }),
    body: z.object({
      enabled: z.boolean().default(true),
      content: z.string().default(""),
      minHeight: z.string().default("300px"),
    }),
    footer: z.object({
      enabled: z.boolean().default(true),
      content: z.string().default(""),
      height: z.string().default("auto"),
    }),
    letterhead: z.object({
      enabled: z.boolean().default(true),
      content: z.string().default(""),
    }),
  }).default({}),
  styling: z.object({
    fontFamily: z.string().default("Arial, sans-serif"),
    fontSize: z.string().default("12px"),
    lineHeight: z.string().default("1.5"),
    marginTop: z.string().default("2cm"),
    marginBottom: z.string().default("2cm"),
    marginLeft: z.string().default("2cm"),
    marginRight: z.string().default("2cm"),
  }).default({}),
});

const fieldSchema = z.object({
  fieldName: z.string().min(1, "‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§®‡§æ‡§Æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à / Field name is required"),
  fieldLabel: z.string().min(1, "‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§≤‡•á‡§¨‡§≤ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à / Field label is required"),
  fieldLabelMarathi: z.string().optional(),
  fieldType: z.enum(["text", "textarea", "select", "checkbox", "radio", "date", "number", "email", "phone", "file", "signature"]),
  section: z.enum(["header", "main", "footer", "signature"]),
  width: z.enum(["full", "half", "quarter", "auto"]),
  isRequired: z.boolean().default(false),
  isReadonly: z.boolean().default(false),
  placeholder: z.string().optional(),
  helpText: z.string().optional(),
  helpTextMarathi: z.string().optional(),
  defaultValue: z.string().optional(),
  options: z.array(z.object({
    value: z.string(),
    label: z.string(),
    labelMarathi: z.string().optional(),
  })).default([]),
  validation: z.object({
    min: z.number().optional(),
    max: z.number().optional(),
    pattern: z.string().optional(),
    customMessage: z.string().optional(),
  }).default({}),
  conditional: z.object({
    dependsOn: z.string().optional(),
    condition: z.enum(["equals", "not_equals", "contains", "not_contains"]).optional(),
    value: z.string().optional(),
  }).default({}),
  displayOrder: z.number().default(0),
});

type TemplateBuilderForm = z.infer<typeof templateBuilderSchema>;
type FieldForm = z.infer<typeof fieldSchema>;

interface TemplateBuilderProps {
  templateId?: string;
  onSave?: (template: any) => void;
  onCancel?: () => void;
}

// Predefined template categories and types
const TEMPLATE_CATEGORIES = [
  { value: "covering_letter", label: "‡§ï‡§µ‡§∞‡§ø‡§Ç‡§ó ‡§≤‡•á‡§ü‡§∞ / Covering Letter" },
  { value: "followup_letter", label: "‡§´‡•â‡§≤‡•ã‡§Ö‡§™ ‡§≤‡•á‡§ü‡§∞ / Followup Letter" },
  { value: "reminder_letter", label: "‡§∞‡§ø‡§Æ‡§æ‡§á‡§Ç‡§°‡§∞ ‡§≤‡•á‡§ü‡§∞ / Reminder Letter" },
  { value: "application", label: "‡§Ü‡§µ‡•á‡§¶‡§® / Application" },
  { value: "complaint", label: "‡§§‡§ï‡•ç‡§∞‡§æ‡§∞ / Complaint" },
  { value: "notice", label: "‡§∏‡•Ç‡§ö‡§®‡§æ / Notice" },
  { value: "order", label: "‡§Ü‡§¶‡•á‡§∂ / Order" },
  { value: "certificate", label: "‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ / Certificate" },
  { value: "circular", label: "‡§™‡§∞‡§ø‡§™‡§§‡•ç‡§∞ / Circular" },
];

const TEMPLATE_TYPES = [
  { value: "government_letter", label: "‡§∂‡§æ‡§∏‡§ï‡•Ä‡§Ø ‡§™‡§§‡•ç‡§∞ / Government Letter" },
  { value: "application_form", label: "‡§Ü‡§µ‡•á‡§¶‡§® ‡§´‡•â‡§∞‡•ç‡§Æ / Application Form" },
  { value: "complaint_form", label: "‡§§‡§ï‡•ç‡§∞‡§æ‡§∞ ‡§´‡•â‡§∞‡•ç‡§Æ / Complaint Form" },
  { value: "notice_form", label: "‡§∏‡•Ç‡§ö‡§®‡§æ ‡§´‡•â‡§∞‡•ç‡§Æ / Notice Form" },
  { value: "certificate_form", label: "‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ ‡§´‡•â‡§∞‡•ç‡§Æ / Certificate Form" },
  { value: "circular_form", label: "‡§™‡§∞‡§ø‡§™‡§§‡•ç‡§∞ ‡§´‡•â‡§∞‡•ç‡§Æ / Circular Form" },
];

const FIELD_TYPES = [
  { value: "text", label: "‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü / Text", icon: "T" },
  { value: "textarea", label: "‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§è‡§∞‡§ø‡§Ø‡§æ / Textarea", icon: "¬∂" },
  { value: "select", label: "‡§∏‡•á‡§≤‡•á‡§ï‡•ç‡§ü / Select", icon: "‚åÑ" },
  { value: "checkbox", label: "‡§ö‡•á‡§ï‡§¨‡•â‡§ï‡•ç‡§∏ / Checkbox", icon: "‚òë" },
  { value: "radio", label: "‡§∞‡•á‡§°‡§ø‡§Ø‡•ã / Radio", icon: "‚óâ" },
  { value: "date", label: "‡§§‡§æ‡§∞‡•Ä‡§ñ / Date", icon: "üìÖ" },
  { value: "number", label: "‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ / Number", icon: "#" },
  { value: "email", label: "‡§à‡§Æ‡•á‡§≤ / Email", icon: "@" },
  { value: "phone", label: "‡§´‡•ã‡§® / Phone", icon: "üìû" },
  { value: "file", label: "‡§´‡§æ‡§á‡§≤ / File", icon: "üìé" },
  { value: "signature", label: "‡§π‡§∏‡•ç‡§§‡§æ‡§ï‡•ç‡§∑‡§∞ / Signature", icon: "‚úç" },
];

export function TemplateBuilder({ templateId, onSave, onCancel }: TemplateBuilderProps) {
  const [activeTab, setActiveTab] = useState("basic");
  const [fields, setFields] = useState<FieldForm[]>([]);
  const [showFieldDialog, setShowFieldDialog] = useState(false);
  const [editingField, setEditingField] = useState<FieldForm | null>(null);
  const [previewMode, setPreviewMode] = useState(false);
  
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Load existing template if editing
  const { data: existingTemplate } = useQuery({
    queryKey: ["/api/document-templates", templateId],
    enabled: !!templateId,
  });

  // Main template form
  const form = useForm<TemplateBuilderForm>({
    resolver: zodResolver(templateBuilderSchema),
    defaultValues: {
      name: "",
      nameMarathi: "",
      description: "",
      descriptionMarathi: "",
      category: "",
      templateType: "",
      subcategory: "",
      letterSubtype: "normal",
      departmentCode: "",
      isPublic: false,
      tags: [],
      content: "",
      structure: {
        header: { enabled: true, content: "", height: "auto" },
        body: { enabled: true, content: "", minHeight: "300px" },
        footer: { enabled: true, content: "", height: "auto" },
        letterhead: { enabled: true, content: "" },
      },
      styling: {
        fontFamily: "Arial, sans-serif",
        fontSize: "12px",
        lineHeight: "1.5",
        marginTop: "2cm",
        marginBottom: "2cm",
        marginLeft: "2cm",
        marginRight: "2cm",
      },
    },
  });

  // Field form for adding/editing fields
  const fieldForm = useForm<FieldForm>({
    resolver: zodResolver(fieldSchema),
    defaultValues: {
      fieldName: "",
      fieldLabel: "",
      fieldLabelMarathi: "",
      fieldType: "text",
      section: "main",
      width: "full",
      isRequired: false,
      isReadonly: false,
      placeholder: "",
      helpText: "",
      helpTextMarathi: "",
      defaultValue: "",
      options: [],
      validation: {},
      conditional: {},
      displayOrder: fields.length,
    },
  });

  // Save template mutation
  const saveTemplateMutation = useMutation({
    mutationFn: async (data: TemplateBuilderForm) => {
      const templateData = {
        ...data,
        fields: JSON.stringify(fields),
        structure: JSON.stringify(data.structure),
        styling: JSON.stringify(data.styling),
        variables: JSON.stringify([]),
        conditions: JSON.stringify([]),
        validation: JSON.stringify({}),
        defaultValues: JSON.stringify({}),
        permissions: JSON.stringify({}),
      };

      if (templateId) {
        return await apiRequest(`/api/document-templates/${templateId}`, "PUT", templateData);
      } else {
        return await apiRequest("/api/document-templates", "POST", templateData);
      }
    },
    onSuccess: (template) => {
      queryClient.invalidateQueries({ queryKey: ["/api/document-templates"] });
      toast({
        title: "‡§∏‡§´‡§≤‡§§‡§æ / Success",
        description: templateId 
          ? "‡§ü‡•á‡§Æ‡•ç‡§™‡•ç‡§≤‡•á‡§ü ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ / Template updated successfully"
          : "‡§ü‡•á‡§Æ‡•ç‡§™‡•ç‡§≤‡•á‡§ü ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ / Template created successfully",
      });
      onSave?.(template);
    },
    onError: () => {
      toast({
        title: "‡§§‡•ç‡§∞‡•Å‡§ü‡§ø / Error",
        description: "‡§ü‡•á‡§Æ‡•ç‡§™‡•ç‡§≤‡•á‡§ü ‡§∏‡•á‡§µ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø / Error saving template",
        variant: "destructive",
      });
    },
  });

  // Add or update field
  const handleFieldSave = (fieldData: FieldForm) => {
    if (editingField) {
      const index = fields.findIndex(f => f.fieldName === editingField.fieldName);
      if (index !== -1) {
        const updatedFields = [...fields];
        updatedFields[index] = fieldData;
        setFields(updatedFields);
      }
    } else {
      setFields([...fields, fieldData]);
    }
    setShowFieldDialog(false);
    setEditingField(null);
    fieldForm.reset();
  };

  // Remove field
  const handleFieldRemove = (fieldName: string) => {
    setFields(fields.filter(f => f.fieldName !== fieldName));
  };

  // Edit field
  const handleFieldEdit = (field: FieldForm) => {
    setEditingField(field);
    fieldForm.reset(field);
    setShowFieldDialog(true);
  };

  // Generate template preview
  const generatePreview = () => {
    const formData = form.getValues();
    const structure = formData.structure;
    const styling = formData.styling;
    
    let preview = `
      <div style="
        font-family: ${styling.fontFamily}; 
        font-size: ${styling.fontSize}; 
        line-height: ${styling.lineHeight};
        margin: ${styling.marginTop} ${styling.marginRight} ${styling.marginBottom} ${styling.marginLeft};
        min-height: 100vh;
      ">
    `;

    // Header section
    if (structure.header.enabled) {
      preview += `
        <div style="height: ${structure.header.height}; border-bottom: 1px solid #ccc; margin-bottom: 20px;">
          <h3 style="text-align: center; margin: 10px 0;">‡§∂‡§æ‡§∏‡§ï‡•Ä‡§Ø ‡§™‡§§‡•ç‡§∞ / Government Letter</h3>
          ${structure.header.content || "<!-- ‡§π‡•á‡§°‡§∞ ‡§ï‡§Ç‡§ü‡•á‡§Ç‡§ü / Header content -->"}
        </div>
      `;
    }

    // Letterhead
    if (structure.letterhead.enabled) {
      preview += `
        <div style="text-align: center; margin-bottom: 30px;">
          <div style="border: 2px solid #000; padding: 20px; background: #f9f9f9;">
            <h2 style="margin: 0; color: #1e40af;">SP Office Ahilyanagar</h2>
            <p style="margin: 5px 0; font-size: 14px;">‡§™‡•Å‡§≤‡§ø‡§∏ ‡§Ö‡§ß‡•Ä‡§ï‡•ç‡§∑‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø ‡§Ö‡§π‡§ø‡§≤‡§Ø‡§æ‡§®‡§ó‡§∞</p>
            ${structure.letterhead.content || ""}
          </div>
        </div>
      `;
    }

    // Body section with fields
    preview += `
      <div style="min-height: ${structure.body.minHeight}; margin-bottom: 30px;">
        ${structure.body.content || ""}
        <div style="margin: 20px 0;">
    `;

    // Add form fields
    fields.filter(f => f.section === "main").forEach(field => {
      preview += `
        <div style="margin-bottom: 15px; width: ${field.width === 'full' ? '100%' : field.width === 'half' ? '50%' : '25%'}; display: inline-block; vertical-align: top; padding-right: 10px;">
          <label style="font-weight: bold; display: block; margin-bottom: 5px;">
            ${field.fieldLabel} ${field.fieldLabelMarathi ? `/ ${field.fieldLabelMarathi}` : ''}
            ${field.isRequired ? '<span style="color: red;">*</span>' : ''}
          </label>
      `;

      switch (field.fieldType) {
        case "textarea":
          preview += `<textarea placeholder="${field.placeholder || ''}" style="width: 95%; height: 80px; padding: 8px; border: 1px solid #ccc; border-radius: 4px;"></textarea>`;
          break;
        case "select":
          preview += `
            <select style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;">
              <option>${field.placeholder || '‡§ö‡•Å‡§®‡•á‡§Ç / Select'}</option>
              ${field.options.map(opt => `<option value="${opt.value}">${opt.label}</option>`).join('')}
            </select>
          `;
          break;
        case "checkbox":
          preview += `<div style="margin-top: 5px;">`;
          field.options.forEach(opt => {
            preview += `<label style="font-weight: normal; margin-right: 15px;"><input type="checkbox" value="${opt.value}" style="margin-right: 5px;"> ${opt.label}</label>`;
          });
          preview += `</div>`;
          break;
        case "radio":
          preview += `<div style="margin-top: 5px;">`;
          field.options.forEach(opt => {
            preview += `<label style="font-weight: normal; margin-right: 15px;"><input type="radio" name="${field.fieldName}" value="${opt.value}" style="margin-right: 5px;"> ${opt.label}</label>`;
          });
          preview += `</div>`;
          break;
        case "date":
          preview += `<input type="date" placeholder="${field.placeholder || ''}" style="width: 95%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;">`;
          break;
        case "signature":
          preview += `<div style="width: 95%; height: 100px; border: 2px dashed #ccc; border-radius: 4px; display: flex; align-items: center; justify-content: center; background: #f9f9f9;">‡§π‡§∏‡•ç‡§§‡§æ‡§ï‡•ç‡§∑‡§∞ ‡§™‡•à‡§° / Signature Pad</div>`;
          break;
        default:
          preview += `<input type="${field.fieldType}" placeholder="${field.placeholder || ''}" style="width: 95%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;">`;
      }

      if (field.helpText) {
        preview += `<small style="color: #666; display: block; margin-top: 3px;">${field.helpText}</small>`;
      }

      preview += `</div>`;
    });

    preview += `</div></div>`;

    // Footer section
    if (structure.footer.enabled) {
      preview += `
        <div style="height: ${structure.footer.height}; border-top: 1px solid #ccc; margin-top: 30px; padding-top: 20px;">
          ${structure.footer.content || `
            <div style="text-align: right;">
              <p style="margin: 10px 0;">‡§π‡§∏‡•ç‡§§‡§æ‡§ï‡•ç‡§∑‡§∞ / Signature</p>
              <p style="margin: 10px 0;">‡§™‡§¶‡§®‡§æ‡§Æ / Designation</p>
              <p style="margin: 10px 0;">‡§¶‡§ø‡§®‡§æ‡§Ç‡§ï / Date: _______</p>
            </div>
          `}
        </div>
      `;
    }

    preview += `</div>`;
    return preview;
  };

  const onSubmit = (data: TemplateBuilderForm) => {
    saveTemplateMutation.mutate(data);
  };

  return (
    <div className="max-w-7xl mx-auto p-6">
      <div className="mb-6">
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
          ‡§ü‡•á‡§Æ‡•ç‡§™‡•ç‡§≤‡•á‡§ü ‡§¨‡§ø‡§≤‡•ç‡§°‡§∞ / Template Builder
        </h1>
        <p className="text-gray-600 dark:text-gray-300">
          ‡§â‡§®‡•ç‡§®‡§§ ‡§´‡•â‡§∞‡•ç‡§Æ ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§î‡§∞ ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§è‡§ï‡•Ä‡§ï‡§∞‡§£ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ï‡§∏‡•ç‡§ü‡§Æ ‡§ü‡•á‡§Æ‡•ç‡§™‡•ç‡§≤‡•á‡§ü ‡§¨‡§®‡§æ‡§è‡§Ç / Create custom templates with advanced form fields and database integration
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Template Builder */}
        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <div className="flex justify-between items-center">
                <div>
                  <CardTitle>‡§ü‡•á‡§Æ‡•ç‡§™‡•ç‡§≤‡•á‡§ü ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® / Template Configuration</CardTitle>
                  <CardDescription>
                    ‡§ü‡•á‡§Æ‡•ç‡§™‡•ç‡§≤‡•á‡§ü ‡§ï‡•Ä ‡§Æ‡•Ç‡§≤‡§≠‡•Ç‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§î‡§∞ ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç / Set up basic template information and structure
                  </CardDescription>
                </div>
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setPreviewMode(!previewMode)}
                  >
                    <Eye className="h-4 w-4 mr-2" />
                    {previewMode ? "‡§∏‡§Ç‡§™‡§æ‡§¶‡§® / Edit" : "‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§µ‡§≤‡•ã‡§ï‡§® / Preview"}
                  </Button>
                  <Button
                    onClick={() => onCancel?.()}
                    variant="outline"
                    size="sm"
                  >
                    ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç / Cancel
                  </Button>
                  <Button
                    onClick={form.handleSubmit(onSubmit)}
                    disabled={saveTemplateMutation.isPending}
                    size="sm"
                  >
                    <Save className="h-4 w-4 mr-2" />
                    {saveTemplateMutation.isPending ? "‡§∏‡•á‡§µ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç..." : "‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç / Save"}
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              {previewMode ? (
                <div className="border rounded-lg p-4 bg-white min-h-96">
                  <div 
                    dangerouslySetInnerHTML={{ __html: generatePreview() }}
                    className="template-preview"
                  />
                </div>
              ) : (
                <Form {...form}>
                  <form className="space-y-6">
                    <Tabs value={activeTab} onValueChange={setActiveTab}>
                      <TabsList className="grid w-full grid-cols-4">
                        <TabsTrigger value="basic">‡§Æ‡•Ç‡§≤ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä / Basic</TabsTrigger>
                        <TabsTrigger value="structure">‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ / Structure</TabsTrigger>
                        <TabsTrigger value="styling">‡§∏‡•ç‡§ü‡§æ‡§á‡§≤‡§ø‡§Ç‡§ó / Styling</TabsTrigger>
                        <TabsTrigger value="fields">‡§´‡§º‡•Ä‡§≤‡•ç‡§°‡•ç‡§∏ / Fields</TabsTrigger>
                      </TabsList>

                      {/* Basic Information Tab */}
                      <TabsContent value="basic" className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <FormField
                            control={form.control}
                            name="name"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>‡§ü‡•á‡§Æ‡•ç‡§™‡•ç‡§≤‡•á‡§ü ‡§®‡§æ‡§Æ / Template Name *</FormLabel>
                                <FormControl>
                                  <Input placeholder="‡§ï‡§µ‡§∞‡§ø‡§Ç‡§ó ‡§≤‡•á‡§ü‡§∞ ‡§ü‡•á‡§Æ‡•ç‡§™‡•ç‡§≤‡•á‡§ü / Covering Letter Template" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />

                          <FormField
                            control={form.control}
                            name="nameMarathi"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>‡§Æ‡§∞‡§æ‡§†‡•Ä ‡§®‡§æ‡§Æ / Marathi Name</FormLabel>
                                <FormControl>
                                  <Input placeholder="‡§ï‡§µ‡•ç‡§π‡§∞‡§ø‡§Ç‡§ó ‡§≤‡•á‡§ü‡§∞ ‡§ü‡•á‡§Æ‡•ç‡§™‡•ç‡§≤‡•á‡§ü" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />

                          <FormField
                            control={form.control}
                            name="category"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>‡§∂‡•ç‡§∞‡•á‡§£‡•Ä / Category *</FormLabel>
                                <Select onValueChange={field.onChange} defaultValue={field.value}>
                                  <FormControl>
                                    <SelectTrigger>
                                      <SelectValue placeholder="‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç / Select category" />
                                    </SelectTrigger>
                                  </FormControl>
                                  <SelectContent>
                                    {TEMPLATE_CATEGORIES.map((cat) => (
                                      <SelectItem key={cat.value} value={cat.value}>
                                        {cat.label}
                                      </SelectItem>
                                    ))}
                                  </SelectContent>
                                </Select>
                                <FormMessage />
                              </FormItem>
                            )}
                          />

                          <FormField
                            control={form.control}
                            name="templateType"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>‡§ü‡•á‡§Æ‡•ç‡§™‡•ç‡§≤‡•á‡§ü ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ / Template Type *</FormLabel>
                                <Select onValueChange={field.onChange} defaultValue={field.value}>
                                  <FormControl>
                                    <SelectTrigger>
                                      <SelectValue placeholder="‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç / Select type" />
                                    </SelectTrigger>
                                  </FormControl>
                                  <SelectContent>
                                    {TEMPLATE_TYPES.map((type) => (
                                      <SelectItem key={type.value} value={type.value}>
                                        {type.label}
                                      </SelectItem>
                                    ))}
                                  </SelectContent>
                                </Select>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </div>

                        <FormField
                          control={form.control}
                          name="description"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>‡§µ‡§ø‡§µ‡§∞‡§£ / Description</FormLabel>
                              <FormControl>
                                <Textarea 
                                  placeholder="‡§ü‡•á‡§Æ‡•ç‡§™‡•ç‡§≤‡•á‡§ü ‡§ï‡§æ ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§µ‡§ø‡§µ‡§∞‡§£ / Detailed template description"
                                  {...field} 
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <div className="flex items-center space-x-2">
                          <FormField
                            control={form.control}
                            name="isPublic"
                            render={({ field }) => (
                              <FormItem className="flex items-center space-x-2">
                                <FormControl>
                                  <Switch
                                    checked={field.value}
                                    onCheckedChange={field.onChange}
                                  />
                                </FormControl>
                                <FormLabel>‡§∏‡§æ‡§∞‡•ç‡§µ‡§ú‡§®‡§ø‡§ï ‡§ü‡•á‡§Æ‡•ç‡§™‡•ç‡§≤‡•á‡§ü / Public Template</FormLabel>
                              </FormItem>
                            )}
                          />
                        </div>
                      </TabsContent>

                      {/* Structure Tab */}
                      <TabsContent value="structure" className="space-y-4">
                        <div className="space-y-6">
                          {/* Header Section */}
                          <Card>
                            <CardHeader>
                              <div className="flex items-center justify-between">
                                <CardTitle className="text-lg">‡§π‡•á‡§°‡§∞ ‡§∏‡•á‡§ï‡•ç‡§∂‡§® / Header Section</CardTitle>
                                <FormField
                                  control={form.control}
                                  name="structure.header.enabled"
                                  render={({ field }) => (
                                    <Switch
                                      checked={field.value}
                                      onCheckedChange={field.onChange}
                                    />
                                  )}
                                />
                              </div>
                            </CardHeader>
                            <CardContent>
                              <FormField
                                control={form.control}
                                name="structure.header.content"
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>‡§π‡•á‡§°‡§∞ ‡§ï‡§Ç‡§ü‡•á‡§Ç‡§ü / Header Content</FormLabel>
                                    <FormControl>
                                      <Textarea 
                                        placeholder="‡§π‡•á‡§°‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è HTML ‡§ï‡§Ç‡§ü‡•á‡§Ç‡§ü / HTML content for header"
                                        rows={3}
                                        {...field} 
                                      />
                                    </FormControl>
                                  </FormItem>
                                )}
                              />
                            </CardContent>
                          </Card>

                          {/* Body Section */}
                          <Card>
                            <CardHeader>
                              <CardTitle className="text-lg">‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡•á‡§ï‡•ç‡§∂‡§® / Body Section</CardTitle>
                            </CardHeader>
                            <CardContent>
                              <FormField
                                control={form.control}
                                name="structure.body.content"
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ï‡§Ç‡§ü‡•á‡§Ç‡§ü / Body Content</FormLabel>
                                    <FormControl>
                                      <Textarea 
                                        placeholder="‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ï‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è HTML / HTML content for body"
                                        rows={4}
                                        {...field} 
                                      />
                                    </FormControl>
                                  </FormItem>
                                )}
                              />
                            </CardContent>
                          </Card>

                          {/* Footer Section */}
                          <Card>
                            <CardHeader>
                              <div className="flex items-center justify-between">
                                <CardTitle className="text-lg">‡§´‡•Ç‡§ü‡§∞ ‡§∏‡•á‡§ï‡•ç‡§∂‡§® / Footer Section</CardTitle>
                                <FormField
                                  control={form.control}
                                  name="structure.footer.enabled"
                                  render={({ field }) => (
                                    <Switch
                                      checked={field.value}
                                      onCheckedChange={field.onChange}
                                    />
                                  )}
                                />
                              </div>
                            </CardHeader>
                            <CardContent>
                              <FormField
                                control={form.control}
                                name="structure.footer.content"
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>‡§´‡•Ç‡§ü‡§∞ ‡§ï‡§Ç‡§ü‡•á‡§Ç‡§ü / Footer Content</FormLabel>
                                    <FormControl>
                                      <Textarea 
                                        placeholder="‡§´‡•Ç‡§ü‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è HTML ‡§ï‡§Ç‡§ü‡•á‡§Ç‡§ü / HTML content for footer"
                                        rows={3}
                                        {...field} 
                                      />
                                    </FormControl>
                                  </FormItem>
                                )}
                              />
                            </CardContent>
                          </Card>
                        </div>
                      </TabsContent>

                      {/* Styling Tab */}
                      <TabsContent value="styling" className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <FormField
                            control={form.control}
                            name="styling.fontFamily"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>‡§´‡•â‡§®‡•ç‡§ü ‡§´‡•à‡§Æ‡§ø‡§≤‡•Ä / Font Family</FormLabel>
                                <Select onValueChange={field.onChange} defaultValue={field.value}>
                                  <FormControl>
                                    <SelectTrigger>
                                      <SelectValue />
                                    </SelectTrigger>
                                  </FormControl>
                                  <SelectContent>
                                    <SelectItem value="Arial, sans-serif">Arial</SelectItem>
                                    <SelectItem value="Times New Roman, serif">Times New Roman</SelectItem>
                                    <SelectItem value="Calibri, sans-serif">Calibri</SelectItem>
                                    <SelectItem value="Georgia, serif">Georgia</SelectItem>
                                  </SelectContent>
                                </Select>
                              </FormItem>
                            )}
                          />

                          <FormField
                            control={form.control}
                            name="styling.fontSize"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>‡§´‡•â‡§®‡•ç‡§ü ‡§∏‡§æ‡§á‡§ú‡§º / Font Size</FormLabel>
                                <Select onValueChange={field.onChange} defaultValue={field.value}>
                                  <FormControl>
                                    <SelectTrigger>
                                      <SelectValue />
                                    </SelectTrigger>
                                  </FormControl>
                                  <SelectContent>
                                    <SelectItem value="10px">10px</SelectItem>
                                    <SelectItem value="12px">12px</SelectItem>
                                    <SelectItem value="14px">14px</SelectItem>
                                    <SelectItem value="16px">16px</SelectItem>
                                    <SelectItem value="18px">18px</SelectItem>
                                  </SelectContent>
                                </Select>
                              </FormItem>
                            )}
                          />

                          <FormField
                            control={form.control}
                            name="styling.marginTop"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>‡§ü‡•â‡§™ ‡§Æ‡§æ‡§∞‡•ç‡§ú‡§ø‡§® / Top Margin</FormLabel>
                                <FormControl>
                                  <Input placeholder="2cm" {...field} />
                                </FormControl>
                              </FormItem>
                            )}
                          />

                          <FormField
                            control={form.control}
                            name="styling.marginLeft"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>‡§≤‡•á‡§´‡•ç‡§ü ‡§Æ‡§æ‡§∞‡•ç‡§ú‡§ø‡§® / Left Margin</FormLabel>
                                <FormControl>
                                  <Input placeholder="2cm" {...field} />
                                </FormControl>
                              </FormItem>
                            )}
                          />
                        </div>
                      </TabsContent>

                      {/* Fields Tab */}
                      <TabsContent value="fields" className="space-y-4">
                        <div className="flex justify-between items-center">
                          <h3 className="text-lg font-semibold">‡§´‡•â‡§∞‡•ç‡§Æ ‡§´‡§º‡•Ä‡§≤‡•ç‡§°‡•ç‡§∏ / Form Fields</h3>
                          <Dialog open={showFieldDialog} onOpenChange={setShowFieldDialog}>
                            <DialogTrigger asChild>
                              <Button size="sm">
                                <Plus className="h-4 w-4 mr-2" />
                                ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§ú‡•ã‡§°‡§º‡•á‡§Ç / Add Field
                              </Button>
                            </DialogTrigger>
                            <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
                              <DialogHeader>
                                <DialogTitle>
                                  {editingField ? "‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç / Edit Field" : "‡§®‡§à ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§ú‡•ã‡§°‡§º‡•á‡§Ç / Add New Field"}
                                </DialogTitle>
                                <DialogDescription>
                                  ‡§´‡•â‡§∞‡•ç‡§Æ ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§î‡§∞ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞ ‡§ï‡§∞‡•á‡§Ç / Configure form field information and settings
                                </DialogDescription>
                              </DialogHeader>
                              
                              <Form {...fieldForm}>
                                <form onSubmit={fieldForm.handleSubmit(handleFieldSave)} className="space-y-4">
                                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <FormField
                                      control={fieldForm.control}
                                      name="fieldName"
                                      render={({ field }) => (
                                        <FormItem>
                                          <FormLabel>‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§®‡§æ‡§Æ / Field Name *</FormLabel>
                                          <FormControl>
                                            <Input placeholder="applicantName" {...field} />
                                          </FormControl>
                                          <FormDescription>
                                            ‡§Ø‡•Ç‡§®‡•Ä‡§ï ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§Ü‡§à‡§°‡•á‡§Ç‡§ü‡§ø‡§´‡§æ‡§Ø‡§∞ / Unique field identifier
                                          </FormDescription>
                                          <FormMessage />
                                        </FormItem>
                                      )}
                                    />

                                    <FormField
                                      control={fieldForm.control}
                                      name="fieldType"
                                      render={({ field }) => (
                                        <FormItem>
                                          <FormLabel>‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ / Field Type *</FormLabel>
                                          <Select onValueChange={field.onChange} defaultValue={field.value}>
                                            <FormControl>
                                              <SelectTrigger>
                                                <SelectValue />
                                              </SelectTrigger>
                                            </FormControl>
                                            <SelectContent>
                                              {FIELD_TYPES.map((type) => (
                                                <SelectItem key={type.value} value={type.value}>
                                                  <span className="mr-2">{type.icon}</span>
                                                  {type.label}
                                                </SelectItem>
                                              ))}
                                            </SelectContent>
                                          </Select>
                                          <FormMessage />
                                        </FormItem>
                                      )}
                                    />

                                    <FormField
                                      control={fieldForm.control}
                                      name="fieldLabel"
                                      render={({ field }) => (
                                        <FormItem>
                                          <FormLabel>‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§≤‡•á‡§¨‡§≤ / Field Label *</FormLabel>
                                          <FormControl>
                                            <Input placeholder="Applicant Name" {...field} />
                                          </FormControl>
                                          <FormMessage />
                                        </FormItem>
                                      )}
                                    />

                                    <FormField
                                      control={fieldForm.control}
                                      name="fieldLabelMarathi"
                                      render={({ field }) => (
                                        <FormItem>
                                          <FormLabel>‡§Æ‡§∞‡§æ‡§†‡•Ä ‡§≤‡•á‡§¨‡§≤ / Marathi Label</FormLabel>
                                          <FormControl>
                                            <Input placeholder="‡§Ö‡§∞‡•ç‡§ú‡§¶‡§æ‡§∞‡§æ‡§ö‡•á ‡§®‡§æ‡§µ" {...field} />
                                          </FormControl>
                                        </FormItem>
                                      )}
                                    />

                                    <FormField
                                      control={fieldForm.control}
                                      name="section"
                                      render={({ field }) => (
                                        <FormItem>
                                          <FormLabel>‡§∏‡•á‡§ï‡•ç‡§∂‡§® / Section</FormLabel>
                                          <Select onValueChange={field.onChange} defaultValue={field.value}>
                                            <FormControl>
                                              <SelectTrigger>
                                                <SelectValue />
                                              </SelectTrigger>
                                            </FormControl>
                                            <SelectContent>
                                              <SelectItem value="header">‡§π‡•á‡§°‡§∞ / Header</SelectItem>
                                              <SelectItem value="main">‡§Æ‡•Å‡§ñ‡•ç‡§Ø / Main</SelectItem>
                                              <SelectItem value="footer">‡§´‡•Ç‡§ü‡§∞ / Footer</SelectItem>
                                              <SelectItem value="signature">‡§π‡§∏‡•ç‡§§‡§æ‡§ï‡•ç‡§∑‡§∞ / Signature</SelectItem>
                                            </SelectContent>
                                          </Select>
                                        </FormItem>
                                      )}
                                    />

                                    <FormField
                                      control={fieldForm.control}
                                      name="width"
                                      render={({ field }) => (
                                        <FormItem>
                                          <FormLabel>‡§ö‡•å‡§°‡§º‡§æ‡§à / Width</FormLabel>
                                          <Select onValueChange={field.onChange} defaultValue={field.value}>
                                            <FormControl>
                                              <SelectTrigger>
                                                <SelectValue />
                                              </SelectTrigger>
                                            </FormControl>
                                            <SelectContent>
                                              <SelectItem value="full">‡§™‡•Ç‡§∞‡•Ä ‡§ö‡•å‡§°‡§º‡§æ‡§à / Full Width</SelectItem>
                                              <SelectItem value="half">‡§Ü‡§ß‡•Ä ‡§ö‡•å‡§°‡§º‡§æ‡§à / Half Width</SelectItem>
                                              <SelectItem value="quarter">‡§ö‡•å‡§•‡§æ‡§à ‡§ö‡•å‡§°‡§º‡§æ‡§à / Quarter Width</SelectItem>
                                              <SelectItem value="auto">‡§ë‡§ü‡•ã / Auto</SelectItem>
                                            </SelectContent>
                                          </Select>
                                        </FormItem>
                                      )}
                                    />
                                  </div>

                                  <FormField
                                    control={fieldForm.control}
                                    name="placeholder"
                                    render={({ field }) => (
                                      <FormItem>
                                        <FormLabel>‡§™‡•ç‡§≤‡•á‡§∏‡§π‡•ã‡§≤‡•ç‡§°‡§∞ / Placeholder</FormLabel>
                                        <FormControl>
                                          <Input placeholder="Enter your name / ‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç" {...field} />
                                        </FormControl>
                                      </FormItem>
                                    )}
                                  />

                                  <FormField
                                    control={fieldForm.control}
                                    name="helpText"
                                    render={({ field }) => (
                                      <FormItem>
                                        <FormLabel>‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü / Help Text</FormLabel>
                                        <FormControl>
                                          <Textarea placeholder="Field help text / ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü" {...field} />
                                        </FormControl>
                                      </FormItem>
                                    )}
                                  />

                                  <div className="flex items-center space-x-4">
                                    <FormField
                                      control={fieldForm.control}
                                      name="isRequired"
                                      render={({ field }) => (
                                        <FormItem className="flex items-center space-x-2">
                                          <FormControl>
                                            <Switch
                                              checked={field.value}
                                              onCheckedChange={field.onChange}
                                            />
                                          </FormControl>
                                          <FormLabel>‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï / Required</FormLabel>
                                        </FormItem>
                                      )}
                                    />

                                    <FormField
                                      control={fieldForm.control}
                                      name="isReadonly"
                                      render={({ field }) => (
                                        <FormItem className="flex items-center space-x-2">
                                          <FormControl>
                                            <Switch
                                              checked={field.value}
                                              onCheckedChange={field.onChange}
                                            />
                                          </FormControl>
                                          <FormLabel>‡§ï‡•á‡§µ‡§≤ ‡§™‡§¢‡§º‡§®‡•á ‡§Ø‡•ã‡§ó‡•ç‡§Ø / Read Only</FormLabel>
                                        </FormItem>
                                      )}
                                    />
                                  </div>

                                  <div className="flex justify-end space-x-2">
                                    <Button 
                                      type="button" 
                                      variant="outline" 
                                      onClick={() => {
                                        setShowFieldDialog(false);
                                        setEditingField(null);
                                        fieldForm.reset();
                                      }}
                                    >
                                      ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç / Cancel
                                    </Button>
                                    <Button type="submit">
                                      {editingField ? "‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç / Update" : "‡§ú‡•ã‡§°‡§º‡•á‡§Ç / Add"}
                                    </Button>
                                  </div>
                                </form>
                              </Form>
                            </DialogContent>
                          </Dialog>
                        </div>

                        {/* Fields List */}
                        <div className="space-y-2">
                          {fields.length === 0 ? (
                            <div className="text-center py-8 text-gray-500">
                              ‡§ï‡•ã‡§à ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§®‡§π‡•Ä‡§Ç ‡§ú‡•ã‡§°‡§º‡•Ä ‡§ó‡§à / No fields added yet
                            </div>
                          ) : (
                            fields.map((field, index) => (
                              <Card key={field.fieldName} className="p-4">
                                <div className="flex items-center justify-between">
                                  <div className="flex items-center space-x-4">
                                    <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                                      <span className="text-blue-600 font-mono text-sm">
                                        {FIELD_TYPES.find(t => t.value === field.fieldType)?.icon}
                                      </span>
                                    </div>
                                    <div>
                                      <h4 className="font-medium">
                                        {field.fieldLabel}
                                        {field.fieldLabelMarathi && ` / ${field.fieldLabelMarathi}`}
                                      </h4>
                                      <div className="flex items-center space-x-2 text-sm text-gray-500">
                                        <span>{field.fieldName}</span>
                                        <Badge variant="outline" className="text-xs">
                                          {FIELD_TYPES.find(t => t.value === field.fieldType)?.label}
                                        </Badge>
                                        <Badge variant="outline" className="text-xs">
                                          {field.section}
                                        </Badge>
                                        {field.isRequired && (
                                          <Badge variant="destructive" className="text-xs">
                                            ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï / Required
                                          </Badge>
                                        )}
                                      </div>
                                    </div>
                                  </div>
                                  <div className="flex items-center space-x-2">
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      onClick={() => handleFieldEdit(field)}
                                    >
                                      <Edit className="h-4 w-4" />
                                    </Button>
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      onClick={() => handleFieldRemove(field.fieldName)}
                                    >
                                      <Trash2 className="h-4 w-4" />
                                    </Button>
                                  </div>
                                </div>
                              </Card>
                            ))
                          )}
                        </div>
                      </TabsContent>
                    </Tabs>
                  </form>
                </Form>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Template Information Panel */}
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>‡§ü‡•á‡§Æ‡•ç‡§™‡•ç‡§≤‡•á‡§ü ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä / Template Info</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">‡§´‡§º‡•Ä‡§≤‡•ç‡§°‡•ç‡§∏ / Fields:</span>
                  <span className="font-medium">{fields.length}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï / Required:</span>
                  <span className="font-medium">{fields.filter(f => f.isRequired).length}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">‡§∏‡•á‡§ï‡•ç‡§∂‡§®‡•ç‡§∏ / Sections:</span>
                  <span className="font-medium">
                    {new Set(fields.map(f => f.section)).size || 1}
                  </span>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§µ‡•á‡§∞‡§ø‡§è‡§¨‡§≤‡•ç‡§∏ / Available Variables</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2 text-sm">
                <div className="p-2 bg-gray-50 rounded">
                  <code>{'{{user.name}}'}</code> - ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§®‡§æ‡§Æ / User Name
                </div>
                <div className="p-2 bg-gray-50 rounded">
                  <code>{'{{user.designation}}'}</code> - ‡§™‡§¶‡§®‡§æ‡§Æ / Designation
                </div>
                <div className="p-2 bg-gray-50 rounded">
                  <code>{'{{today}}'}</code> - ‡§Ü‡§ú ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ / Today's Date
                </div>
                <div className="p-2 bg-gray-50 rounded">
                  <code>{'{{department}}'}</code> - ‡§µ‡§ø‡§≠‡§æ‡§ó / Department
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}